--- refocus-0.9.0/configure.in	2003-01-30 22:29:29.000000000 +0100
+++ refocus-0.9.0.new/configure.in	2011-08-24 18:39:02.000000000 +0200
@@ -1,8 +1,8 @@
 dnl Process this file with autoconf to produce a configure script.
 
-AC_INIT(README)
-
-AM_INIT_AUTOMAKE(refocus, 0.9.0)
+AC_INIT([refocus],[0.9.0])
+AC_CONFIG_SRCDIR(README)
+AM_INIT_AUTOMAKE
 
 AC_PROG_CC
 AC_CHECK_PROG(GCC3, gcc3, gcc3)
@@ -12,7 +12,7 @@
    AC_MSG_RESULT([using $CC as compiler])
 fi
 
-AC_STDC_HEADERS
+AC_HEADER_STDC([])
 AC_PROG_RANLIB
 
 # Check if the user has ATLAS installed in ./lib-atlas
@@ -36,7 +36,7 @@
 AC_SUBST(LAPACK_INCLUDE_DIR)
 AM_CONDITIONAL(HAVE_ATLAS, test x${have_atlas} = xyes)
 
-AM_PATH_GIMP(1.2.0)
+AM_PATH_GIMP_2_0(2.0.0)
 AM_PATH_GTK_2_0(2.0.0)
 AM_PATH_GLIB_2_0(2.0.0)
 
@@ -106,5 +106,6 @@
 #Check if erf is defined in the mathlibrary
 AC_CHECK_LIB(m, erf, AC_DEFINE(HAVE_ERF))
 
-AC_OUTPUT([Makefile src/Makefile lib/Makefile doc/Makefile gtk-doc/Makefile ])
+AC_CONFIG_FILES([Makefile src/Makefile lib/Makefile doc/Makefile gtk-doc/Makefile ])
+AC_OUTPUT
 
--- refocus-0.9.0/lib/Makefile.am	2003-01-30 22:29:52.000000000 +0100
+++ refocus-0.9.0.new/lib/Makefile.am	2011-08-24 18:30:54.000000000 +0200
@@ -1,4 +1,4 @@
-CFLAGS=-fomit-frame-pointer -O3 -funroll-all-loops
+AM_CFLAGS=-fomit-frame-pointer -O3 -funroll-all-loops
 
 
 noinst_LIBRARIES = liblapack.a libatlas.a libcblas.a
--- refocus-0.9.0/src/Makefile.am	2003-01-30 22:30:18.000000000 +0100
+++ refocus-0.9.0.new/src/Makefile.am	2011-08-24 18:30:54.000000000 +0200
@@ -11,7 +11,7 @@
 EXTRA_DIST = dummy-plugin.c
 
 refocus_SOURCES = refocus.c conv.c gimppreview.c prevman.c util.c matrix.c tilebuf.c bdclosure.c fwlapack.c
-refocus_LDADD = @GTK_LIBS@ -lgimp ${ldadd_atlas}
+refocus_LDADD = @GIMP_LIBS@ ${ldadd_atlas}
 refocus_DEPENDENCIES=@LAPACK_LIB_DIR@/liblapack.a
 
 test_matrix_SOURCES = matrix.c test-matrix.c fwlapack.c
--- refocus-0.9.0/src/gimppreview.c	2003-01-30 22:30:18.000000000 +0100
+++ refocus-0.9.0.new/src/gimppreview.c	2011-08-24 18:30:54.000000000 +0200
@@ -344,7 +344,7 @@
 
   /* Save the drawable info. */
   preview->drawable = drawable;
-  preview->drawable_has_alpha = gimp_drawable_has_alpha (drawable->id);
+  preview->drawable_has_alpha = gimp_drawable_has_alpha (drawable->drawable_id);
 
   /* Calculate our preview size. */
   if (preview_size == PREVIEW_FIXED_SIZE)
--- refocus-0.9.0/src/prevman.c	2003-01-30 22:30:18.000000000 +0100
+++ refocus-0.9.0.new/src/prevman.c	2011-08-24 18:30:54.000000000 +0200
@@ -52,7 +52,7 @@
   tile_source->width = drawable->width;
   tile_source->height = drawable->height;
   tile_source->bpp = drawable->bpp;
-  tile_source->has_alpha = gimp_drawable_has_alpha (drawable->id);
+  tile_source->has_alpha = gimp_drawable_has_alpha (drawable->drawable_id);
   tile_source->un.drw.drawable = drawable;
   gimp_pixel_rgn_init (&tile_source->un.drw.pixel_rgn, drawable, x, y, width,
                        height, FALSE, FALSE);
@@ -144,7 +144,7 @@
   tile_sink->width = drawable->width;
   tile_sink->height = drawable->height;
   tile_sink->bpp = drawable->bpp;
-  tile_sink->has_alpha = gimp_drawable_has_alpha (drawable->id);
+  tile_sink->has_alpha = gimp_drawable_has_alpha (drawable->drawable_id);
   gimp_pixel_rgn_init (&tile_sink->un.drw.pixel_rgn, drawable, x, y, width,
                        height, TRUE, TRUE);
 }
@@ -159,7 +159,7 @@
   tile_sink->width = width;
   tile_sink->height = height;
   tile_sink->bpp = drawable->bpp;
-  tile_sink->has_alpha = gimp_drawable_has_alpha (drawable->id);
+  tile_sink->has_alpha = gimp_drawable_has_alpha (drawable->drawable_id);
   tile_sink->un.prv.data = g_new (guchar,
                                   tile_sink->width * tile_sink->height *
                                   tile_sink->bpp);
--- refocus-0.9.0/src/refocus.c	2003-01-30 22:30:19.000000000 +0100
+++ refocus-0.9.0.new/src/refocus.c	2011-08-24 18:30:54.000000000 +0200
@@ -45,9 +45,9 @@
 
 /* Declare local functions. */
 static void query (void);
-static void run (char *name,
+static void run (const gchar *name,
                  gint nparams,
-                 GimpParam * param,
+                 const GimpParam * param,
                  gint * nreturn_vals, GimpParam ** return_vals);
 static gint dialog ();
 static void doit (void);
@@ -111,7 +111,6 @@
     {GIMP_PDB_FLOAT, "noise", "Noise to Signal ratio"},
   };
   static GimpParamDef *return_vals = NULL;
-  static gint nargs = (gint) (sizeof (args) / sizeof (args[0]));
   static gint nreturn_vals = 0;
 
   gimp_install_procedure ("plug_in_refocus",
@@ -123,15 +122,15 @@
                           "<Image>/Filters/Enhance/Refocus ...",
                           "RGB*, GRAY*",
                           GIMP_PLUGIN,
-                          nargs, nreturn_vals, args, return_vals);
+                          G_N_ELEMENTS(args), nreturn_vals, args, return_vals);
 }
 
 static void
-run (char *name, gint n_params, GimpParam * param,
+run (const gchar *name, gint n_params, const GimpParam * param,
      gint * nreturn_vals, GimpParam ** return_vals)
 {
   static GimpParam values[1];
-  GimpRunModeType run_mode;
+  GimpRunMode run_mode;
   GimpPDBStatusType status = GIMP_PDB_SUCCESS;
 
   (void) name;                  /* Shut up warnings about unused parameters. */
@@ -186,8 +185,8 @@
     {
 
       /*  Make sure that the drawable is gray or RGB color  */
-      if (gimp_drawable_is_rgb (drawable->id) ||
-          gimp_drawable_is_gray (drawable->id))
+      if (gimp_drawable_is_rgb (drawable->drawable_id) ||
+          gimp_drawable_is_gray (drawable->drawable_id))
         {
           doit ();
 
@@ -411,7 +410,7 @@
           event_is_current =
             gimp_preview_draw_unscaled_row (GIMP_PREVIEW (my_widgets.preview),
                                             event->event_id,
-                                            gimp_drawable_type (drawable->id),
+                                            gimp_drawable_type (drawable->drawable_id),
                                             row, buf);
         };
       g_free (buf);
@@ -608,7 +607,7 @@
   gimp_progress_init ("Computing matrix");
   update_matrix ();
   gimp_progress_init ("Applying convolution");
-  gimp_drawable_mask_bounds (drawable->id, &sx1, &sy1, &sx2, &sy2);
+  gimp_drawable_mask_bounds (drawable->drawable_id, &sx1, &sy1, &sx2, &sy2);
   width = sx2 - sx1;
   height = sy2 - sy1;
   tile_source_init_from_drawable (&source, drawable, sx1, sy1, width, height);
@@ -618,7 +617,7 @@
                   matrix, 2 * my_config.mat_width + 1,
                   &update_progress_closure);
   gimp_drawable_flush (drawable);
-  gimp_drawable_merge_shadow (drawable->id, TRUE);
-  gimp_drawable_update (drawable->id, sx1, sy1, width, height);
+  gimp_drawable_merge_shadow (drawable->drawable_id, TRUE);
+  gimp_drawable_update (drawable->drawable_id, sx1, sy1, width, height);
   g_free (matrix);
 }
