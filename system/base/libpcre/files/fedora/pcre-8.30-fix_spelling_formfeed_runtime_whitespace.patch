http://bugs.exim.org/show_bug.cgi?id=1245

Index: doc/pcrebuild.3
===================================================================
--- doc/pcrebuild.3     (revision 965)
+++ doc/pcrebuild.3     (working copy)
@@ -100,7 +100,7 @@
 functions.
 .P
 If you set --enable-utf when compiling in an EBCDIC environment, PCRE expects
-its input to be either ASCII or UTF-8 (depending on the runtime option). It is
+its input to be either ASCII or UTF-8 (depending on the run-time option). It is
 not possible to support both EBCDIC and UTF-8 codes in the same version of the
 library. Consequently, --enable-utf and --enable-ebcdic are mutually
 exclusive.
@@ -313,7 +313,7 @@
 .sp
 to the \fBconfigure\fP command, the distributed tables are no longer used.
 Instead, a program called \fBdftables\fP is compiled and run. This outputs the
-source for new set of tables, created in the default locale of your C runtime
+source for new set of tables, created in the default locale of your C run-time
 system. (This method of replacing the tables does not work if you are cross
 compiling, because \fBdftables\fP is run on the local host. If you need to
 create alternative tables when cross compiling, you will have to do so "by
Index: doc/pcre_compile2.3
===================================================================
--- doc/pcre_compile2.3 (revision 965)
+++ doc/pcre_compile2.3 (working copy)
@@ -50,7 +50,7 @@
   PCRE_DOLLAR_ENDONLY     $ not to match newline at end
   PCRE_DOTALL             . matches anything including NL
   PCRE_DUPNAMES           Allow duplicate names for subpatterns
-  PCRE_EXTENDED           Ignore whitespace and # comments
+  PCRE_EXTENDED           Ignore white space and # comments
   PCRE_EXTRA              PCRE extra features
                             (not much use currently)
   PCRE_FIRSTLINE          Force matching to be before newline
Index: doc/pcreapi.3
===================================================================
--- doc/pcreapi.3       (revision 965)
+++ doc/pcreapi.3       (working copy)
@@ -302,7 +302,7 @@
 strings: a single CR (carriage return) character, a single LF (linefeed)
 character, the two-character sequence CRLF, any of the three preceding, or any
 Unicode newline sequence. The Unicode newline sequences are the three just
-mentioned, plus the single characters VT (vertical tab, U+000B), FF (formfeed,
+mentioned, plus the single characters VT (vertical tab, U+000B), FF (form feed,
 U+000C), NEL (next line, U+0085), LS (line separator, U+2028), and PS
 (paragraph separator, U+2029).
 .P
@@ -642,8 +642,8 @@
 .sp
   PCRE_EXTENDED
 .sp
-If this bit is set, whitespace data characters in the pattern are totally
-ignored except when escaped or inside a character class. Whitespace does not
+If this bit is set, white space data characters in the pattern are totally
+ignored except when escaped or inside a character class. White space does not
 include the VT character (code 11). In addition, characters between an
 unescaped # outside a character class and the next newline, inclusive, are also
 ignored. This is equivalent to Perl's /x option, and it can be changed within a
@@ -661,7 +661,7 @@
 happen to represent a newline do not count.
 .P
 This option makes it possible to include comments inside complicated patterns.
-Note, however, that this applies only to data characters. Whitespace characters
+Note, however, that this applies only to data characters. White space characters
 may never appear within special character sequences in a pattern, for example
 within the sequence (?( that introduces a conditional subpattern.
 .sp
@@ -741,7 +741,7 @@
 preceding sequences should be recognized. Setting PCRE_NEWLINE_ANY specifies
 that any Unicode newline sequence should be recognized. The Unicode newline
 sequences are the three just mentioned, plus the single characters VT (vertical
-tab, U+000B), FF (formfeed, U+000C), NEL (next line, U+0085), LS (line
+tab, U+000B), FF (form feed, U+000C), NEL (next line, U+0085), LS (line
 separator, U+2028), and PS (paragraph separator, U+2029). For the 8-bit
 library, the last two are recognized only in UTF-8 mode.
 .P
@@ -753,7 +753,7 @@
 other combinations may yield unused numbers and cause an error.
 .P
 The only time that a line break in a pattern is specially recognized when
-compiling is when PCRE_EXTENDED is set. CR and LF are whitespace characters,
+compiling is when PCRE_EXTENDED is set. CR and LF are white space characters,
 and so are ignored in this mode. Also, an unescaped # outside a character class
 indicates a comment that lasts until after the next line break sequence. In
 other circumstances, line break sequences in patterns are treated as literal
Index: doc/pcrecpp.3
===================================================================
--- doc/pcrecpp.3       (revision 965)
+++ doc/pcrecpp.3       (working copy)
@@ -173,7 +173,7 @@
    PCRE_DOTALL           dot matches newlines        /s
    PCRE_DOLLAR_ENDONLY   $ matches only at end       N/A
    PCRE_EXTRA            strict escape parsing       N/A
-   PCRE_EXTENDED         ignore whitespaces          /x
+   PCRE_EXTENDED         ignore white spaces         /x
    PCRE_UTF8             handles UTF8 chars          built-in
    PCRE_UNGREEDY         reverses * and *?           N/A
    PCRE_NO_AUTO_CAPTURE  disables capturing parens   N/A (*)
Index: doc/pcre_jit_stack_alloc.3
===================================================================
--- doc/pcre_jit_stack_alloc.3  (revision 965)
+++ doc/pcre_jit_stack_alloc.3  (working copy)
@@ -21,7 +21,7 @@
 This function is used to create a stack for use by the code compiled by the JIT
 optimization of \fBpcre[16]_study()\fP. The arguments are a starting size for
 the stack, and a maximum size to which it is allowed to grow. The result can be
-passed to the JIT runtime code by \fBpcre[16]_assign_jit_stack()\fP, or that
+passed to the JIT run-time code by \fBpcre[16]_assign_jit_stack()\fP, or that
 function can set up a callback for obtaining a stack. A maximum stack size of
 512K to 1M should be more than enough for any pattern. For more details, see
 the
Index: doc/pcreunicode.3
===================================================================
--- doc/pcreunicode.3   (revision 965)
+++ doc/pcreunicode.3   (working copy)
@@ -85,7 +85,7 @@
 .P
 If an invalid UTF-8 string is passed to PCRE, an error return is given. At
 compile time, the only additional information is the offset to the first byte
-of the failing character. The runtime functions \fBpcre_exec()\fP and
+of the failing character. The run-time functions \fBpcre_exec()\fP and
 \fBpcre_dfa_exec()\fP also pass back this information, as well as a more
 detailed reason code if the caller has provided memory in which to do this.
 .P
@@ -127,7 +127,7 @@
 .P
 If an invalid UTF-16 string is passed to PCRE, an error return is given. At
 compile time, the only additional information is the offset to the first data
-unit of the failing character. The runtime functions \fBpcre16_exec()\fP and
+unit of the failing character. The run-time functions \fBpcre16_exec()\fP and
 \fBpcre16_dfa_exec()\fP also pass back this information, as well as a more
 detailed reason code if the caller has provided memory in which to do this.
 .P
@@ -192,7 +192,7 @@
 7. Similarly, characters that match the POSIX named character classes are all
 low-valued characters, unless the PCRE_UCP option is set.
 .P
-8. However, the horizontal and vertical whitespace matching escapes (\eh, \eH,
+8. However, the horizontal and vertical white space matching escapes (\eh, \eH,
 \ev, and \eV) do match all the appropriate Unicode characters, whether or not
 PCRE_UCP is set.
 .P
Index: doc/pcre_compile.3
===================================================================
--- doc/pcre_compile.3  (revision 965)
+++ doc/pcre_compile.3  (working copy)
@@ -44,7 +44,7 @@
   PCRE_DOLLAR_ENDONLY     $ not to match newline at end
   PCRE_DOTALL             . matches anything including NL
   PCRE_DUPNAMES           Allow duplicate names for subpatterns
-  PCRE_EXTENDED           Ignore whitespace and # comments
+  PCRE_EXTENDED           Ignore white space and # comments
   PCRE_EXTRA              PCRE extra features
                             (not much use currently)
   PCRE_FIRSTLINE          Force matching to be before newline
Index: doc/pcrepattern.3
===================================================================
--- doc/pcrepattern.3   (revision 965)
+++ doc/pcrepattern.3   (working copy)
@@ -198,10 +198,10 @@
 backslash. All other characters (in particular, those whose codepoints are
 greater than 127) are treated as literals.
 .P
-If a pattern is compiled with the PCRE_EXTENDED option, whitespace in the
+If a pattern is compiled with the PCRE_EXTENDED option, white space in the
 pattern (other than in a character class) and characters between a # outside
 a character class and the next newline are ignored. An escaping backslash can
-be used to include a whitespace or # character as part of the pattern.
+be used to include a white space or # character as part of the pattern.
 .P
 If you want to remove the special meaning from a sequence of characters, you
 can do so by putting them between \eQ and \eE. This is different from Perl in
@@ -237,7 +237,7 @@
   \ea        alarm, that is, the BEL character (hex 07)
   \ecx       "control-x", where x is any ASCII character
   \ee        escape (hex 1B)
-  \ef        formfeed (hex 0C)
+  \ef        form feed (hex 0C)
   \en        linefeed (hex 0A)
   \er        carriage return (hex 0D)
   \et        tab (hex 09)
@@ -399,12 +399,12 @@
 .sp
   \ed     any decimal digit
   \eD     any character that is not a decimal digit
-  \eh     any horizontal whitespace character
-  \eH     any character that is not a horizontal whitespace character
-  \es     any whitespace character
-  \eS     any character that is not a whitespace character
-  \ev     any vertical whitespace character
-  \eV     any character that is not a vertical whitespace character
+  \eh     any horizontal white space character
+  \eH     any character that is not a horizontal white space character
+  \es     any white space character
+  \eS     any character that is not a white space character
+  \ev     any vertical white space character
+  \eV     any character that is not a vertical white space character
   \ew     any "word" character
   \eW     any "non-word" character
 .sp
@@ -493,7 +493,7 @@
 .sp
   U+000A     Linefeed
   U+000B     Vertical tab
-  U+000C     Formfeed
+  U+000C     Form feed
   U+000D     Carriage return
   U+0085     Next line
   U+2028     Line separator
@@ -520,7 +520,7 @@
 .\"
 This particular group matches either the two-character sequence CR followed by
 LF, or one of the single characters LF (linefeed, U+000A), VT (vertical tab,
-U+000B), FF (formfeed, U+000C), CR (carriage return, U+000D), or NEL (next
+U+000B), FF (form feed, U+000C), CR (carriage return, U+000D), or NEL (next
 line, U+0085). The two-character sequence is treated as a single unit that
 cannot be split.
 .P
@@ -819,7 +819,7 @@
   Xwd   Any Perl "word" character
 .sp
 Xan matches characters that have either the L (letter) or the N (number)
-property. Xps matches the characters tab, linefeed, vertical tab, formfeed, or
+property. Xps matches the characters tab, linefeed, vertical tab, form feed, or
 carriage return, and any other character that has the Z (separator) property.
 Xsp is the same as Xps, except that vertical tab is excluded. Xwd matches the
 same characters as Xan, plus underscore.
@@ -1843,7 +1843,7 @@
 following a backslash are taken as part of a potential back reference number.
 If the pattern continues with a digit character, some delimiter must be used to
 terminate the back reference. If the PCRE_EXTENDED option is set, this can be
-whitespace. Otherwise, the \eg{ syntax or an empty comment (see
+white space. Otherwise, the \eg{ syntax or an empty comment (see
 .\" HTML <a href="#comments">
 .\" </a>
 "Comments"
@@ -2200,7 +2200,7 @@
 subroutines
 .\"
 is described below.) For example, a pattern to match an IPv4 address such as
-"192.168.23.245" could be written like this (ignore whitespace and line
+"192.168.23.245" could be written like this (ignore white space and line
 breaks):
 .sp
   (?(DEFINE) (?<byte> 2[0-4]\ed | 25[0-5] | 1\ed\ed | [1-9]?\ed) )
Index: doc/pcre_assign_jit_stack.3
===================================================================
--- doc/pcre_assign_jit_stack.3 (revision 965)
+++ doc/pcre_assign_jit_stack.3 (working copy)
@@ -18,7 +18,7 @@
 .SH DESCRIPTION
 .rs
 .sp
-This function provides control over the memory used as a stack at runtime by a
+This function provides control over the memory used as a stack at run-time by a
 call to \fBpcre[16]_exec()\fP with a pattern that has been successfully
 compiled with JIT optimization. The arguments are:
 .sp
Index: doc/pcrecompat.3
===================================================================
--- doc/pcrecompat.3    (revision 965)
+++ doc/pcrecompat.3    (working copy)
@@ -114,7 +114,7 @@
 .P
 14. Perl recognizes comments in some places that PCRE does not, for example,
 between the ( and ? at the start of a subpattern. If the /x modifier is set,
-Perl allows whitespace between ( and ? but PCRE never does, even if the
+Perl allows white space between ( and ? but PCRE never does, even if the
 PCRE_EXTENDED option is set.
 .P
 15. PCRE provides some extensions to the Perl regular expression facilities.
Index: doc/pcresyntax.3
===================================================================
--- doc/pcresyntax.3    (revision 965)
+++ doc/pcresyntax.3    (working copy)
@@ -25,7 +25,7 @@
   \ea         alarm, that is, the BEL character (hex 07)
   \ecx        "control-x", where x is any ASCII character
   \ee         escape (hex 1B)
-  \ef         formfeed (hex 0C)
+  \ef         form feed (hex 0C)
   \en         newline (hex 0A)
   \er         carriage return (hex 0D)
   \et         tab (hex 09)
@@ -42,16 +42,16 @@
   \eC         one data unit, even in UTF mode (best avoided)
   \ed         a decimal digit
   \eD         a character that is not a decimal digit
-  \eh         a horizontal whitespace character
-  \eH         a character that is not a horizontal whitespace character
+  \eh         a horizontal white space character
+  \eH         a character that is not a horizontal white space character
   \eN         a character that is not a newline
   \ep{\fIxx\fP}     a character with the \fIxx\fP property
   \eP{\fIxx\fP}     a character without the \fIxx\fP property
   \eR         a newline sequence
-  \es         a whitespace character
-  \eS         a character that is not a whitespace character
-  \ev         a vertical whitespace character
-  \eV         a character that is not a vertical whitespace character
+  \es         a white space character
+  \eS         a character that is not a white space character
+  \ev         a vertical white space character
+  \eV         a character that is not a vertical white space character
   \ew         a "word" character
   \eW         a "non-word" character
   \eX         an extended Unicode sequence
@@ -245,7 +245,7 @@
   lower       lower case letter
   print       printing, including space
   punct       printing, excluding alphanumeric
-  space       whitespace
+  space       white space
   upper       upper case letter
   word        same as \ew
   xdigit      hexadecimal digit 
